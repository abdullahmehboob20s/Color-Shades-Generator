{"version":3,"sources":["Components/Shade.jsx","Sounds/sound1.mp3","Components/Shades.jsx","Components/ShadeInput.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Shade","item","oncopycolor","useState","copied","setcopied","useEffect","interval","setInterval","clearInterval","text","hexString","onCopy","style","backgroundColor","cursor","className","Shades","color","shades","setshades","setcheck","audioRef","useRef","isColor","generateShades","shades123","values","current","play","ref","src","sound","map","index","ShadeInput","props","type","value","onChange","e","oninputchange","placeholder","name","id","onClick","nextColor","App","setColor","randomcolor","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAuCeA,EAlCH,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAKC,EAAiB,EAAjBA,YAAiB,EACPC,oBAAS,GADF,mBAC3BC,EAD2B,KACpBC,EADoB,KAEhCC,qBAAU,WACN,IAAIC,EACJ,IAAc,IAAXH,EAKC,OAJAG,EAAWC,aAAY,WACnBH,GAAU,KACX,KAEI,WACHI,cAAcF,MAGxB,CAACH,IAOH,OACI,cAAC,kBAAD,CAAiBM,KAAMT,EAAKU,YAAaC,OAP1B,WACfP,GAAU,IACI,IAAXD,GACCF,KAIJ,SACA,qBAAKW,MAAO,CAACC,gBAAkBb,EAAKU,YAAcI,OAAS,WAAaC,UAAU,OAAlF,SACKZ,EACD,sBAAMY,UAAU,SAAhB,oBAGA,+BAAOf,EAAKU,mBChCT,MAA0B,mCCgD1BM,EAzCF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACGf,mBAAS,IADZ,mBACjBgB,EADiB,KACVC,EADU,OAECjB,oBAAS,GAFV,mBAEXkB,GAFW,WAGlBC,EAAWC,mBAEfjB,qBAAU,WACHkB,IAAQN,IACPO,IACAJ,GAAS,IAGTA,GAAS,KAEf,CAACH,IAEH,IAAIO,EAAiB,WACjB,IAAIC,EAAY,IAAIC,IAAOT,GAAOC,OAAO,GACzCC,EAAUM,IAGVxB,EAAc,WACdoB,EAASM,QAAQC,QAKrB,OACI,sBAAKb,UAAU,SAAf,UACK,uBAAOc,IAAKR,EAAUS,IAAKC,IAC3Bb,EAAOc,KAAI,SAAChC,EAAOiC,GAChB,OAAO,cAAC,EAAD,CAAmBjC,KAAMA,EAAMiB,MAAOA,EAAOhB,YAAaA,GAA9CgC,UCxBpBC,EAXE,SAACC,GACd,OACI,sBAAKpB,UAAU,aAAf,UACI,uBAAOqB,KAAK,OAAOC,MAAOF,EAAMlB,MAAOqB,SAAU,SAACC,GAAD,OAAOJ,EAAMK,cAAcD,IAAIE,YAAY,eAAe1B,UAAU,cAAc2B,KAAK,GAAGC,GAAG,KAC9I,8BACI,wBAAQ5B,UAAU,YAAY6B,QAAS,kBAAMT,EAAMU,aAAnD,8B,gBCsBDC,EAvBL,SAACX,GAAW,IAAD,EACIjC,mBAAS,SADb,mBACde,EADc,KACR8B,EADQ,KAGnB1C,qBAAU,WACR0C,EAASC,SACT,IAUF,OACE,sBAAKjC,UAAU,MAAf,UACE,cAAC,EAAD,CAAYE,MAAOA,EAAOuB,cALV,SAACH,GACnBU,EAASV,EAAMY,OAAOZ,QAIoCQ,UAV5C,WACdE,EAASC,UAUP,cAAC,EAAD,CAAQ/B,MAAOA,QCZNiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5638c1e8.chunk.js","sourcesContent":["import React ,{useState,useEffect} from \"react\"\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport \"../App.css\"\r\n\r\n\r\nlet Shade = ({item,oncopycolor}) => {\r\n    let [copied,setcopied] = useState(false)\r\n    useEffect(()=>{\r\n        let interval;\r\n        if(copied === true){\r\n            interval = setInterval(() => {\r\n                setcopied(false)\r\n            }, 1000);\r\n\r\n            return () => {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n    },[copied])\r\n    let copyingColor = () => {\r\n        setcopied(true)\r\n        if(copied === false){\r\n            oncopycolor()\r\n        }\r\n    }\r\n    return(\r\n        <CopyToClipboard text={item.hexString()} onCopy={copyingColor}>\r\n        <div style={{backgroundColor : item.hexString() , cursor : \"pointer\"}}  className=\"item\">\r\n            {copied ?(  \r\n            <span className=\"copied\">copied</span>\r\n            )\r\n            :( \r\n            <span>{item.hexString()}</span>\r\n            )}\r\n        </div>\r\n    </CopyToClipboard>\r\n    )\r\n}\r\n\r\nexport default Shade","export default __webpack_public_path__ + \"static/media/sound1.5c555b61.mp3\";","import React,{useState , useEffect,useRef} from \"react\"\r\nimport values from 'values.js'\r\nimport isColor from 'is-color'\r\nimport Shade from \"./Shade\"\r\nimport sound from \"../Sounds/sound1.mp3\"\r\n\r\n\r\nlet Shades = ({color}) => {\r\n    let [shades,setshades] = useState([])\r\n    let [check,setcheck] = useState(false)\r\n    let audioRef = useRef()\r\n     \r\n    useEffect(() => {\r\n        if(isColor(color)){\r\n            generateShades()\r\n            setcheck(false)\r\n        }\r\n        else{\r\n            setcheck(true)\r\n        }\r\n    },[color])\r\n    \r\n    let generateShades = ()=>{\r\n        let shades123 = new values(color).shades(1)\r\n        setshades(shades123)\r\n    }\r\n\r\n    let oncopycolor = () => {\r\n        audioRef.current.play()\r\n    }\r\n\r\n   \r\n    \r\n    return(\r\n        <div className=\"Shades\">\r\n             <audio ref={audioRef} src={sound}  />\r\n            {shades.map((item , index)=> {\r\n                return <Shade key={index} item={item} color={color} oncopycolor={oncopycolor} />\r\n             } \r\n            )}\r\n            {/* <div className=\"noColor\"><h1>there is no color</h1></div> */}\r\n            \r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Shades","import React from \"react\"\r\n\r\nlet ShadeInput = (props) => {\r\n    return(\r\n        <div className=\"ShadeInput\">\r\n            <input type=\"text\" value={props.color} onChange={(e) => props.oninputchange(e)} placeholder=\"Search Color\" className=\"ShadeSearch\" name=\"\" id=\"\"/>\r\n            <div>\r\n                <button className=\"nextColor\" onClick={() => props.nextColor()}>next Color</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShadeInput","import React,{useState,useEffect} from \"react\"\nimport \"./App.css\"\nimport Shades from \"./Components/Shades\"\nimport ShadeInput from \"./Components/ShadeInput\"\nimport randomcolor from \"randomcolor\"\n\nlet App = (props) => {\n  let [color,setColor] = useState(\"#0000\");\n\n  useEffect(() => {\n    setColor(randomcolor())\n  },[])\n\n  let nextColor = () => {\n    setColor(randomcolor())        \n  }\n\n\n  let oninputchange = (value) => {\n    setColor(value.target.value)\n  }\n  return(\n    <div className=\"App\">\n      <ShadeInput color={color} oninputchange={oninputchange} nextColor={nextColor} />\n      <Shades color={color} />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}